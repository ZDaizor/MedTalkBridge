<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.bizcase.mapper.BizStudentsMapper">

    <!-- 统计用户完成训练的次数 -->
    <select id="countCompletedCasesByUserId" parameterType="long" resultType="int">

        SELECT
            COUNT(*) AS completed_training_count
        FROM
            biz_consultation_sessions
        WHERE
            user_id = 1
          AND eval_mode = 1  -- 模式（1：训练）
          AND status = 1;    -- 问诊状态（1：完成）

    </select>

    <select id="sumTrainingMinutesByUserId" parameterType="map" resultType="int">
        SELECT IFNULL(SUM(TIMESTAMPDIFF(MINUTE, create_time, end_time)), 0) AS totalMinutes
        FROM biz_consultation_sessions
        WHERE user_id = #{userId}
          AND eval_mode = #{evalMode}
    </select>

    <!-- 计算用户考试的平均得分 -->
    <select id="getAverageScoreByUserId" parameterType="map" resultType="double">
        SELECT IFNULL(AVG(case_total_score),0) AS average_score
        FROM (
            SELECT e.case_id,
                   SUM(e.totle_score * (p.prompt_percentage )) AS case_total_score
            FROM biz_case_evaluations e
            JOIN biz_case_prompt p ON e.case_id = p.case_id AND e.step_id = p.step_id
            WHERE e.user_id = #{userId}
              AND e.eval_mode = #{evalMode}
              AND e.step_id IN (1, 2, 3)
            GROUP BY e.case_id
            HAVING COUNT(DISTINCT e.step_id) = 3
        ) AS completed_case_scores
    </select>


    <!-- 计算用户训练的平均成绩 -->
    <select id="getTrainingAverageScoreByUserId" parameterType="map" resultType="double">

        SELECT
            IFNULL(AVG(totle_score),0) AS average_training_score
        FROM
            biz_case_evaluations
        <where>
            user_id = #{userId}
            <if test="evalMode != null  and evalMode != ''">AND eval_mode = #{evalMode};</if> -- 模式（1：训练）
        </where>

    </select>

    <!-- 获取用户的训练 or  开始 列表 -->
    <select id="getTrainingList" parameterType="long" resultType="com.ruoyi.bizcase.domain.dto.TrainExamInfo">
        SELECT
            bcr.session_id AS sessionId,
            su.nick_name AS nickName,
            bc.case_name AS caseName,
            bcs.step_name AS stepName,
            IFNULL(bce.totle_score, '未评分') AS score,
            CASE
                WHEN bce.totle_score >= 90 THEN '优'
                WHEN bce.totle_score >= 80 AND bce.totle_score &lt; 90 THEN '良'
                WHEN bce.totle_score &lt; 80 AND bce.totle_score >= 0 THEN '中'
                ELSE '无评级'
            END AS level,
            bcr.create_time AS startTime,
            bcr.end_time AS endTime,
            TIMESTAMPDIFF(MINUTE, bcr.create_time, bcr.end_time) AS totle
        FROM
            biz_consultation_sessions AS bcr
        LEFT JOIN
            sys_user AS su ON bcr.user_id = su.user_id
        LEFT JOIN
            biz_case AS bc ON bcr.case_id = bc.case_id
        LEFT JOIN
            biz_case_step AS bcs ON bcr.step_id = bcs.step_id
        LEFT JOIN
            biz_case_evaluations AS bce ON bcr.session_id = bce.session_id
        <where>
            bcr.user_id = #{userId}
            AND bcr.eval_mode = #{evalMode}
            <if test="caseName != null  and caseName != ''">and case_name like concat('%', #{caseName}, '%')</if>
        </where>
        ORDER BY
            bcr.create_time DESC
    </select>

    <select id="countExamSessionsByUserId" parameterType="map" resultType="int">
        SELECT COUNT(*) AS exam_count
        FROM biz_consultation_sessions
        WHERE user_id = #{userId}
          AND eval_mode = #{evalMode}
    </select>

    <select id="countHighScoreExamSessionsByUserId" parameterType="map" resultType="int">
        SELECT COUNT(*) AS high_score_exam_count
        FROM (
            SELECT e.case_id
            FROM biz_case_evaluations e
            JOIN biz_case_prompt p ON e.case_id = p.case_id AND e.step_id = p.step_id
            WHERE e.user_id = #{userId}
              AND e.eval_mode = #{evalMode}
            GROUP BY e.case_id
            HAVING COUNT(DISTINCT e.step_id) = 3
               AND SUM(e.totle_score * (p.prompt_percentage / 100.0)) > 90
        ) AS high_scoring_exams
    </select>

    <select id="getActivityList" parameterType="long" resultType="java.util.HashMap">
        SELECT
        s.end_time AS activity_time,
        CONCAT(
        '完成了 ',
        s.case_title,
        ' 的 ',
        cs.step_name,
        ' ',
        CASE s.eval_mode
        WHEN 1 THEN '训练'
        WHEN 2 THEN '考试'
        ELSE '活动'
        END
        ) AS activity_type,s.case_title,
        CASE
        WHEN e.totle_score IS NULL THEN '未评分'
        WHEN e.totle_score >= 90 THEN '已评分 (优秀)'
        WHEN e.totle_score >= 80 THEN '已评分 (良好)'
        WHEN e.totle_score >= 70 THEN '已评分 (中等)'
        WHEN e.totle_score >= 60 THEN '已评分 (及格)'
        ELSE '已评分 (不及格)'
        END AS rating_status,
        <!-- 您也可以选择性地显示原始分数 -->
        e.totle_score AS score
        FROM
        biz_consultation_sessions s
        LEFT JOIN
        biz_case_step cs ON s.case_id = cs.case_id AND s.step_id = cs.step_id
        LEFT JOIN
        biz_case_evaluations e ON s.session_id = e.session_id and s.case_id = e.case_id
        WHERE
        s.user_id = #{userId}
        AND s.status = 1 <!-- 0: 代表已完成 -->
        ORDER BY
        s.end_time DESC <!-- 按活动完成时间降序排列-->
        LIMIT 5; <!-- 新增：限制只返回前5条记录-->
    </select>

    <select id="countUserBadges" parameterType="long" resultType="int">
        SELECT COUNT(*) AS badge_count
        FROM biz_user_achievement
        WHERE user_id = #{userId}
    </select>

    <select id="getStepAccuracyRate" parameterType="map" resultType="double">
        SELECT ifnull(AVG(totle_score),0) AS accuracy_rate
        FROM biz_case_evaluations
        WHERE user_id = #{userId}
          AND step_id = #{stepId}
    </select>

    <select id="countFinishedCases" parameterType="long" resultType="int">
        SELECT COUNT(*) AS finash_case
        FROM (
            SELECT e.case_id
            FROM biz_case_evaluations e
            JOIN biz_case_prompt p ON e.case_id = p.case_id AND e.step_id = p.step_id
            WHERE e.user_id = #{userId}
            GROUP BY e.case_id
            HAVING COUNT(DISTINCT e.step_id) = 3
        ) AS high_scoring_exams
    </select>

    <select id="getRecentMonthTrainingStats" parameterType="long" resultType="java.util.HashMap">
        WITH AllMonths AS (
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS month_key
            UNION ALL
            SELECT DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m')
            UNION ALL
            SELECT DATE_FORMAT(NOW() - INTERVAL 2 MONTH, '%Y-%m')
            UNION ALL
            SELECT DATE_FORMAT(NOW() - INTERVAL 3 MONTH, '%Y-%m')
            UNION ALL
            SELECT DATE_FORMAT(NOW() - INTERVAL 4 MONTH, '%Y-%m')
        )
        SELECT
            #{userId} AS user_id,
            m.month_key AS month,
            COUNT(s.session_id) AS training_count
        FROM
            AllMonths m
        LEFT JOIN
            biz_consultation_sessions s
            ON m.month_key = DATE_FORMAT(s.create_time, '%Y-%m')
            AND s.user_id = #{userId}
            AND s.eval_mode = 1
            AND s.status = 1
        GROUP BY
            m.month_key
        ORDER BY
            m.month_key ASC
    </select>

    <select id="getUserAchievementList" resultType="com.ruoyi.bizcase.domain.dto.UserAchievementDTO" parameterType="long">
        SELECT
            a.achievement_id AS achievementId,
            a.achievement_name AS achievementName,
            a.achievement_content AS achievementContent,
            CASE WHEN ua.user_id IS NOT NULL THEN '1' ELSE '0' END AS completionStatus,
            ua.create_time AS completionTime
        FROM biz_achievement a
        LEFT JOIN biz_user_achievement ua ON a.achievement_id = ua.achievement_id AND ua.user_id = #{userId}
        ORDER BY a.achievement_id ASC
    </select>

    <select id="getTrainingCaseCompletion" resultType="com.ruoyi.bizcase.domain.dto.TrainingCaseCompletionDTO" parameterType="long">
        SELECT
            t.finash_case,
            t.total_case,
            ROUND(
                IF(t.total_case > 0, t.finash_case * 100.0 / t.total_case, 0),
                2
            ) AS percentage
        FROM
            (
                SELECT
                    (SELECT COUNT(*)
                     FROM (
                         SELECT 1
                         FROM biz_case_evaluations
                         WHERE user_id = #{userId} AND eval_mode = 1
                         GROUP BY case_id
                         HAVING COUNT(DISTINCT step_id) = 3
                     ) AS completed_query) AS finash_case,

                    (SELECT COUNT(*) FROM biz_case WHERE case_status = 1) AS total_case
            ) AS t
    </select>

    <select id="getCommunicationScoreTrend" resultType="com.ruoyi.bizcase.domain.dto.CommunicationScoreTrendDTO" parameterType="long">
        WITH
        AllMonths AS (
            SELECT DATE_FORMAT(NOW() - INTERVAL 0 MONTH, '%Y-%m') AS month_key
            UNION ALL SELECT DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m')
            UNION ALL SELECT DATE_FORMAT(NOW() - INTERVAL 2 MONTH, '%Y-%m')
            UNION ALL SELECT DATE_FORMAT(NOW() - INTERVAL 3 MONTH, '%Y-%m')
            UNION ALL SELECT DATE_FORMAT(NOW() - INTERVAL 4 MONTH, '%Y-%m')
        ),
        AllSteps AS (
            SELECT 1 AS step_id, '术前交代' AS step_name
            UNION ALL SELECT 2 AS step_id, '术中处理' AS step_name
            UNION ALL SELECT 3 AS step_id, '术后交代' AS step_name
        ),
        MonthStepGrid AS (
            SELECT m.month_key, s.step_id, s.step_name
            FROM AllMonths m
            CROSS JOIN AllSteps s
        ),
        UserMonthlyScores AS (
            SELECT
                DATE_FORMAT(s.end_time, '%Y-%m') AS month_key,
                e.step_id,
                AVG(e.totle_score) AS average_score
            FROM
                biz_case_evaluations e
            JOIN
                biz_consultation_sessions s ON e.session_id = s.session_id
            WHERE
                e.user_id = #{userId}
            GROUP BY
                DATE_FORMAT(s.end_time, '%Y-%m'),
                e.step_id
        )
        SELECT
            DATE_FORMAT(CONCAT(g.month_key, '-01'), '%c月') AS monthDisplay,
            g.step_id AS stepId,
            g.step_name AS stepName,
            ROUND(IFNULL(ums.average_score, 0), 2) AS score
        FROM
            MonthStepGrid g
        LEFT JOIN
            UserMonthlyScores ums ON g.month_key = ums.month_key AND g.step_id = ums.step_id
        ORDER BY
            g.month_key ASC,
            g.step_id ASC
    </select>
</mapper>